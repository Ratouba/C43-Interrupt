
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000424  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb3  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000744  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006cb  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000077d  00000000  00000000  00002667  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_1>
   8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_2>
   c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 89 01 	call	0x312	; 0x312 <main>
  64:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC ^=0xff;
		break;
		
		case DIO_PORTD:
		PORTD ^=0xff ;
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPinVal>:
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinVal+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinVal+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinVal+0xe0>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinVal+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinVal+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinVal+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinVal+0x5c>
 166:	08 95       	ret
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinVal+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinVal+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinVal+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinVal+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinVal+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinVal+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	08 95       	ret
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinVal+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinVal+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinVal+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinVal+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinVal+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinVal+0xca>
 1ce:	08 95       	ret
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinVal+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinVal+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinVal+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinVal+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinVal+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinVal+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
 216:	08 95       	ret
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinVal+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinVal+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <DIO_TogglePin>:
	}
	
}
void DIO_TogglePin(Port,pin)
{
	switch(Port)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	91 05       	cpc	r25, r1
 234:	a9 f0       	breq	.+42     	; 0x260 <DIO_TogglePin+0x30>
 236:	1c f4       	brge	.+6      	; 0x23e <DIO_TogglePin+0xe>
 238:	89 2b       	or	r24, r25
 23a:	39 f0       	breq	.+14     	; 0x24a <DIO_TogglePin+0x1a>
 23c:	08 95       	ret
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	91 05       	cpc	r25, r1
 242:	c9 f0       	breq	.+50     	; 0x276 <DIO_TogglePin+0x46>
 244:	03 97       	sbiw	r24, 0x03	; 3
 246:	11 f1       	breq	.+68     	; 0x28c <DIO_TogglePin+0x5c>
 248:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_BIT(PORTA,pin);
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_TogglePin+0x26>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_TogglePin+0x22>
 25a:	82 27       	eor	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27
		break;
 25e:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 260:	28 b3       	in	r18, 0x18	; 24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_TogglePin+0x3c>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_TogglePin+0x38>
 270:	82 27       	eor	r24, r18
 272:	88 bb       	out	0x18, r24	; 24
		break;
 274:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_TogglePin+0x52>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_TogglePin+0x4e>
 286:	82 27       	eor	r24, r18
 288:	85 bb       	out	0x15, r24	; 21
		break;
 28a:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 28c:	22 b3       	in	r18, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_TogglePin+0x68>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_TogglePin+0x64>
 29c:	82 27       	eor	r24, r18
 29e:	82 bb       	out	0x12, r24	; 18
 2a0:	08 95       	ret

000002a2 <SET_GLOBAL_INT>:

void SET_GLOBAL_INT(void)
{
	#if    GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
	
	SET_BIT(SREG,7);
 2a2:	8f b7       	in	r24, 0x3f	; 63
 2a4:	80 68       	ori	r24, 0x80	; 128
 2a6:	8f bf       	out	0x3f, r24	; 63
 2a8:	08 95       	ret

000002aa <EXT_INT0_Init>:
	#endif
}

void EXT_INT0_Init(void)
{    /*enable global INT*/
	SET_GLOBAL_INT();
 2aa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SET_GLOBAL_INT>
	/* enable EXT_INT0*/
	SET_BIT(GICR,6);
 2ae:	8b b7       	in	r24, 0x3b	; 59
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8b bf       	out	0x3b, r24	; 59
	#elif   EXT_INT0_TRIGGER == TRIGGER_FALLING
	  CLR_BIT(MCUCR,0);
	  SET_BIT(MCUCR,1);
	  
	#elif   EXT_INT0_TRIGGER == TRIGGER_ANY_LOGICAL_CHANGE
	   SET_BIT(MCUCR,0);
 2b4:	85 b7       	in	r24, 0x35	; 53
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	85 bf       	out	0x35, r24	; 53
	   CLR_BIT(MCUCR,1);
 2ba:	85 b7       	in	r24, 0x35	; 53
 2bc:	8d 7f       	andi	r24, 0xFD	; 253
 2be:	85 bf       	out	0x35, r24	; 53
 2c0:	08 95       	ret

000002c2 <EXT_INT1_Init>:
	
}

void EXT_INT1_Init(void)
{ /*enable global INT*/
	SET_GLOBAL_INT();
 2c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SET_GLOBAL_INT>
	/* enable EXT_INT1*/
	SET_BIT(GICR,7);
 2c6:	8b b7       	in	r24, 0x3b	; 59
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8b bf       	out	0x3b, r24	; 59
	#if     EXT_INT1_TRIGGER == TRIGGER_RISING
	SET_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
	
	#elif   EXT_INT1_TRIGGER == TRIGGER_FALLING
	CLR_BIT(MCUCR,2);
 2cc:	85 b7       	in	r24, 0x35	; 53
 2ce:	8b 7f       	andi	r24, 0xFB	; 251
 2d0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	85 bf       	out	0x35, r24	; 53
 2d8:	08 95       	ret

000002da <EXT_INT2_Init>:
	
}
/* Your assignment*/
void EXT_INT2_Init(void)
{/*enable global INT*/
	SET_GLOBAL_INT();
 2da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SET_GLOBAL_INT>
	/* enable EXT_INT2*/
	SET_BIT(GICR,5);
 2de:	8b b7       	in	r24, 0x3b	; 59
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	8b bf       	out	0x3b, r24	; 59
	
	/*select trigger*/
	#if     EXT_INT2_TRIGGER == TRIGGER_RISING
	SET_BIT(MCUCSR,6);
 2e4:	84 b7       	in	r24, 0x34	; 52
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	84 bf       	out	0x34, r24	; 52
 2ea:	08 95       	ret

000002ec <LED0_Init>:
{
	DIO_SetPinVal(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
}
void LED0_OFF(void)
{
	DIO_SetPinVal(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2f6:	08 95       	ret

000002f8 <LED0_ON>:
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinVal>
 302:	08 95       	ret

00000304 <LED0_Toggle>:
}
void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 18 01 	call	0x230	; 0x230 <DIO_TogglePin>
 310:	08 95       	ret

00000312 <main>:
#include "avr/interrupt.h"
#include <util/delay.h>

int main(void)
{  
	LED0_Init();
 312:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED0_Init>
	
   EXT_INT0_Init();
 316:	0e 94 55 01 	call	0x2aa	; 0x2aa <EXT_INT0_Init>
   EXT_INT1_Init();
 31a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EXT_INT1_Init>
   EXT_INT2_Init();
 31e:	0e 94 6d 01 	call	0x2da	; 0x2da <EXT_INT2_Init>
 322:	ff cf       	rjmp	.-2      	; 0x322 <main+0x10>

00000324 <__vector_1>:
    while (1) 
    {
    }
}
ISR(INT0_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	LED0_Toggle();
 346:	0e 94 82 01 	call	0x304	; 0x304 <LED0_Toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	83 ed       	ldi	r24, 0xD3	; 211
 34e:	90 e3       	ldi	r25, 0x30	; 48
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <__vector_1+0x2c>
 358:	00 c0       	rjmp	.+0      	; 0x35a <__vector_1+0x36>
 35a:	00 00       	nop
	_delay_ms(1000);
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_2>:
ISR(INT1_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	LED0_Toggle();
 3a0:	0e 94 82 01 	call	0x304	; 0x304 <LED0_Toggle>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	83 ed       	ldi	r24, 0xD3	; 211
 3a8:	90 e3       	ldi	r25, 0x30	; 48
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <__vector_2+0x2c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <__vector_2+0x36>
 3b4:	00 00       	nop
	_delay_ms(1000);
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_3>:
ISR(INT2_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	LED0_ON();
 3fa:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED0_ON>
	
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
